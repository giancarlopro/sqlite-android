plugins {
    id 'de.undercouch.download' version '4.1.1'
    id("maven-publish")
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'de.undercouch.download'

group = 'com.github.giancarlopro'
version = '3.37.3'
description = 'Android SQLite compatibility library'

android {
    compileSdkVersion 30
    buildToolsVersion "32.0.0"
    ndkVersion '23.1.7779620'

    defaultConfig {
        minSdkVersion 23
        versionName project.version
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'proguard-rules.pro'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    libraryVariants.all {
        it.generateBuildConfigProvider.configure { enabled = false }
    }
}

dependencies {
    api 'androidx.sqlite:sqlite:2.1.0'
    api 'androidx.core:core:1.5.0'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    implementation 'com.android.ndk.thirdparty:openssl:1.1.1g-alpha-1'
}

ext {
    opensslBinariesUrl = 'https://github.com/giancarlopro/sqlite-android/releases/download/3.36.0/openssl1.1.1l.zip'
    sqliteDistributionUrl = 'https://sqlite.org/2022/sqlite-amalgamation-3380100.zip'

    pomXml = {
//        resolveStrategy = DELEGATE_FIRST
        name project.name
        description project.description
        url 'https://github.com/giancarlopro/sqlite-android'
        scm {
            url 'https://github.com/giancarlopro/sqlite-android.git'
            connection 'scm:git:git://github.com/giancarlopro/sqlite-android.git'
            developerConnection 'scm:git:git@github.com/giancarlopro/sqlite-android.git'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
    }
}

task downloadOpenSSL(type: Download) {
    src project.opensslBinariesUrl
    dest 'src/main/jni/openssl.zip'
}

task installOpenSSL(dependsOn: downloadOpenSSL, type: Copy) {
    from zipTree(downloadOpenSSL.dest)
    into 'src/main/jni/sqlite/libs'
}

task downloadSqlite(type: Download) {
    src project.sqliteDistributionUrl
    dest 'src/main/jni/sqlite.zip'
}

task installSqlite(dependsOn: downloadSqlite, type: Copy) {
    from zipTree(downloadSqlite.dest).matching {
        include '*/*'
        eachFile { it.setPath(it.getName()) }
    }
    into 'src/main/jni/sqlite'
}

preBuild.dependsOn installSqlite
preBuild.dependsOn installOpenSSL

Properties properties = new Properties()
File localProperties = project.rootProject.file('local.properties')
if (localProperties.exists()) {
    properties.load(localProperties.newDataInputStream())
}

task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

// gradlew :app:comp to show components names
//task comps {
//    afterEvaluate {
//        println("Components: " + components*.name)
//    }
//}

publishing {
    publications {
        grp(MavenPublication) {
            artifactId project.name

            afterEvaluate {
                from components.release
            }

            groupId project.group
            version project.version

            artifact sourceJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/giancarlopro/sqlite-android"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

publish.dependsOn "assembleRelease"
publish.dependsOn "bundleReleaseAar"
